// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingClient is the client API for Greeting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingClient interface {
	GetList(ctx context.Context, in *GetGreetingListParam, opts ...grpc.CallOption) (*GetGreetingListReply, error)
	GetAll(ctx context.Context, in *GetGreetingAllParam, opts ...grpc.CallOption) (*GetGreetingAllReply, error)
	GetDetail(ctx context.Context, in *GetGreetingDetailParam, opts ...grpc.CallOption) (*GetGreetingDetailReply, error)
	Create(ctx context.Context, in *CreateGreetingParam, opts ...grpc.CallOption) (*CreateGreetingReply, error)
	Update(ctx context.Context, in *UpdateGreetingParam, opts ...grpc.CallOption) (*UpdateGreetingReply, error)
	Delete(ctx context.Context, in *DeleteGreetingParam, opts ...grpc.CallOption) (*DeleteGreetingReply, error)
}

type greetingClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingClient(cc grpc.ClientConnInterface) GreetingClient {
	return &greetingClient{cc}
}

func (c *greetingClient) GetList(ctx context.Context, in *GetGreetingListParam, opts ...grpc.CallOption) (*GetGreetingListReply, error) {
	out := new(GetGreetingListReply)
	err := c.cc.Invoke(ctx, "/protos.Greeting/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingClient) GetAll(ctx context.Context, in *GetGreetingAllParam, opts ...grpc.CallOption) (*GetGreetingAllReply, error) {
	out := new(GetGreetingAllReply)
	err := c.cc.Invoke(ctx, "/protos.Greeting/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingClient) GetDetail(ctx context.Context, in *GetGreetingDetailParam, opts ...grpc.CallOption) (*GetGreetingDetailReply, error) {
	out := new(GetGreetingDetailReply)
	err := c.cc.Invoke(ctx, "/protos.Greeting/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingClient) Create(ctx context.Context, in *CreateGreetingParam, opts ...grpc.CallOption) (*CreateGreetingReply, error) {
	out := new(CreateGreetingReply)
	err := c.cc.Invoke(ctx, "/protos.Greeting/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingClient) Update(ctx context.Context, in *UpdateGreetingParam, opts ...grpc.CallOption) (*UpdateGreetingReply, error) {
	out := new(UpdateGreetingReply)
	err := c.cc.Invoke(ctx, "/protos.Greeting/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingClient) Delete(ctx context.Context, in *DeleteGreetingParam, opts ...grpc.CallOption) (*DeleteGreetingReply, error) {
	out := new(DeleteGreetingReply)
	err := c.cc.Invoke(ctx, "/protos.Greeting/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetingServer is the server API for Greeting service.
// All implementations should embed UnimplementedGreetingServer
// for forward compatibility
type GreetingServer interface {
	GetList(context.Context, *GetGreetingListParam) (*GetGreetingListReply, error)
	GetAll(context.Context, *GetGreetingAllParam) (*GetGreetingAllReply, error)
	GetDetail(context.Context, *GetGreetingDetailParam) (*GetGreetingDetailReply, error)
	Create(context.Context, *CreateGreetingParam) (*CreateGreetingReply, error)
	Update(context.Context, *UpdateGreetingParam) (*UpdateGreetingReply, error)
	Delete(context.Context, *DeleteGreetingParam) (*DeleteGreetingReply, error)
}

// UnimplementedGreetingServer should be embedded to have forward compatible implementations.
type UnimplementedGreetingServer struct {
}

func (UnimplementedGreetingServer) GetList(context.Context, *GetGreetingListParam) (*GetGreetingListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedGreetingServer) GetAll(context.Context, *GetGreetingAllParam) (*GetGreetingAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGreetingServer) GetDetail(context.Context, *GetGreetingDetailParam) (*GetGreetingDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedGreetingServer) Create(context.Context, *CreateGreetingParam) (*CreateGreetingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGreetingServer) Update(context.Context, *UpdateGreetingParam) (*UpdateGreetingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGreetingServer) Delete(context.Context, *DeleteGreetingParam) (*DeleteGreetingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeGreetingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingServer will
// result in compilation errors.
type UnsafeGreetingServer interface {
	mustEmbedUnimplementedGreetingServer()
}

func RegisterGreetingServer(s grpc.ServiceRegistrar, srv GreetingServer) {
	s.RegisterService(&Greeting_ServiceDesc, srv)
}

func _Greeting_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreetingListParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Greeting/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).GetList(ctx, req.(*GetGreetingListParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeting_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreetingAllParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Greeting/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).GetAll(ctx, req.(*GetGreetingAllParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeting_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreetingDetailParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Greeting/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).GetDetail(ctx, req.(*GetGreetingDetailParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeting_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGreetingParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Greeting/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).Create(ctx, req.(*CreateGreetingParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeting_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGreetingParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Greeting/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).Update(ctx, req.(*UpdateGreetingParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeting_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGreetingParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Greeting/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).Delete(ctx, req.(*DeleteGreetingParam))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeting_ServiceDesc is the grpc.ServiceDesc for Greeting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Greeting",
	HandlerType: (*GreetingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _Greeting_GetList_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Greeting_GetAll_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _Greeting_GetDetail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Greeting_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Greeting_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Greeting_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/protos/greeting.proto",
}
